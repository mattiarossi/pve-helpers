#!/bin/bash

VMID="$1"
ACTION="$2"
SLEPT=""
SLEPT30=""
GOVERNOR="schedutil"

cpu_tasks() {
    expect <<EOF | sed -n 's/^.* CPU .*thread_id=\(.*\)$/\1/p' | tr -d '\r' || true
spawn qm monitor $VMID
expect ">"
send "info cpus\r"
expect ">"
EOF
}

if_action() {
  if [[ "$ACTION" == "$1" ]]; then
    shift
    eval "$@"
  fi
}

sleep_once() {
  if [[ -z "$SLEPT" ]]; then
    sleep 1s
    SLEPT=1
  fi
}

sleep_once_30() {
  if [[ -z "$SLEPT30" ]]; then
    sleep 30s
    SLEPT30=1
  fi
}

vmpid() {
  cat "/var/run/qemu-server/$VMID.pid"
}

exec_pci_rescan() {
  echo "Running PCI rescan for $VMID..."
  echo 1 > /sys/bus/pci/rescan
}

exec_set_haltpoll() {
  echo "Setting haltpoll for $VMID..."
  echo $1 > /sys/module/kvm/parameters/halt_poll_ns
}

exec_assign_interrupts() {
  echo "Wating 30 seconds for all vfio-gpu interrupts to show up..."
  sleep_once_30
  MASK="$1"
  shift
  for interrupt; do
    interrupt=$(printf '%b' "${interrupt//%/\\x}")
    echo "Moving $interrupt interrupts to $MASK cpu cores $VMID..."
    grep $interrupt /proc/interrupts | cut -d ":" -f 1 | while read -r i; do
      echo "- IRQ: $(grep "^\s*$i:" /proc/interrupts)"
      echo $MASK > /proc/irq/$i/smp_affinity_list
    done
  done
}

exec_pci_unbind() {
  echo "Running PCI unbind of '$1:$2.$3' for $VMID..."
  echo 1 > "/sys/bus/pci/devices/0000:$1:$2.$3/remove"
}

exec_cpu_emulatorpin() {
  sleep_once
  VMPID="$(vmpid)"
  echo "Running taskset for emulator task with $1 for $VMPID..."
  echo "* Assigning process $VMPID to core $1 ..."
  cset proc --move --pid "$VMPID" --toset=user --force
  taskset -p -c "$1" "$VMPID"
  echo "* Setting Governor for core $1 to $GOVERNOR..."
  cpupower -c "$1" frequency-set -g $GOVERNOR
  echo ""
}

exec_cpu_taskset() {
  sleep_once
  IFS=', ' read -r -a core_match <<< "$1"
  VCPUS=($(cpu_tasks))
  VCPU_COUNT="${#VCPUS[@]}"

  if [[ $VCPU_COUNT -eq 0 ]]; then
      echo "* No VCPUS for VM$VMID"
      exit 1
  fi

  echo "* Detected ${#VCPUS[@]} assigned to VM$VMID..."
  echo "* Resetting cpu shield..."

  # Set qemu task affinity
  for CPU_INDEX in "${!VCPUS[@]}"
  do
      CPU_TASK="${VCPUS[$CPU_INDEX]}"
      echo "* Assigning ${core_match[$CPU_INDEX]} to $CPU_TASK..."
      cset proc --move --pid "$CPU_TASK" --toset=user --force
      taskset -pc "${core_match[$CPU_INDEX]}" "$CPU_TASK"
      echo "* Setting Governor for core ${core_match[$CPU_INDEX]} to $GOVERNOR..."
      cpupower -c "${core_match[$CPU_INDEX]}" frequency-set -g $GOVERNOR
  done
  echo ""
}

exec_cpu_taskset_reset() {
  sleep_once
  IFS=', ' read -r -a core_match <<< "$1"

  echo "* Resetting cpu shield..."
  for CPU_INDEX in "${core_match[@]}"
  do
  echo "Index: ${CPU_INDEX}"
      cpupower -c "${core_match[$CPU_INDEX]}" frequency-set -g schedutil
  done
  echo ""
}


exec_cpu_chrt() {
  sleep_once

  echo "Running chrt with $1:$2 for $(vmpid)..."
  VCPUS=($(cpu_tasks))
  VCPU_COUNT="${#VCPUS[@]}"

  if [[ $VCPU_COUNT -eq 0 ]]; then
      echo "* No VCPUS for VM$VMID"
      exit 1
  fi

  echo "* Detected ${#VCPUS[@]} assigned to VM$VMID..."

  for CPU_INDEX in "${!VCPUS[@]}"
  do
      CPU_TASK="${VCPUS[$CPU_INDEX]}"
      echo "* Setting Scheduler for Task ${CPU_TASK} to $1..."
      chrt -v "--$1" -p "$2" "$CPU_TASK"
  done
  echo ""
}

exec_qm_conflict() {
  echo "Conflicting with other VM$1, shutdown just in case..."
  qm shutdown "$1"
}

exec_qm_depends() {
  echo "VM$1 is required, ensure that it is started..."
  qm start "$1"
}


exec_cmds() {
  while read CMD ARG1 ARG2 REST; do
    case "$CMD" in
      "#cpu_governor")
        GOVERNOR="$ARG1"
        ;;

      "#pci_rescan")
        if_action pre-start exec_pci_rescan
        ;;

      "#cpu_emulatorpin")
        if_action post-start exec_cpu_emulatorpin "$ARG1"
        ;;

      "#cpu_taskset")
        if_action post-start exec_cpu_taskset "$ARG1"
        if_action post-stop exec_cpu_taskset_reset "$ARG1"
        ;;

      "#set_halt_poll")
        if_action post-start exec_set_haltpoll "$ARG1"
        ;;

      "#assign_interrupts")
        if_action post-start exec_assign_interrupts "$ARG1" "$ARG2" $REST
        ;;

      "#cpu_chrt")
        if_action post-start exec_cpu_chrt "${ARG1:-fifo}" "${ARG2:-1}"
        ;;

      "#qm_depends")
        if_action post-start exec_qm_depends "$ARG1"
        ;;

      "#pci_unbind")
        if_action post-stop exec_pci_unbind "$ARG1" "$ARG2" "$ARG3"
        ;;

      "#qm_conflict")
        if_action pre-start exec_qm_conflict "$ARG1"
        ;;

      "#qm_*"|"#cpu_*"|"#pci_*")
        echo "exec-cmds: command is unknown '$CMD'"
        ;;
    esac
  done
}

exec_cmds < "/etc/pve/qemu-server/$1.conf"
